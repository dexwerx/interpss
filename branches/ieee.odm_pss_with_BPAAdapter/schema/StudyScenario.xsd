<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:ns="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.ieee.org/odm/Schema/2008" xmlns:pss="http://www.ieee.org/odm/Schema/2008"
	elementFormDefault="qualified">

	<include schemaLocation="loadflow/LFRecordType.xsd"></include>
	<include schemaLocation="shortcircuit/SCRecordType.xsd"></include>
	<include schemaLocation="dynamic/DstabRecordType.xsd"></include>
	<include schemaLocation="opf/OPFRecordType.xsd"></include>
	<include schemaLocation="Modification.xsd"></include>

	<annotation>
		<documentation>Copyright www.interpss.org 2008-2010</documentation>
	</annotation>
	
	<!-- 
		elements for defining study scenario for run analysis of the base case data
		   Study scenario definition is software implementation specific. ODM study scenario is designed 
		   such it can accommodate other study scenario schema by extension   
	 -->
	<element name="studyScenario" type="pss:StudyScenarioXmlType" />
	<element name="ipssStudyScenario" type="pss:IpssStudyScenarioXmlType" substitutionGroup="pss:studyScenario">
        <annotation><documentation>
        Study scenario for running InterPSS software
        </documentation></annotation>
	</element>
	
	<complexType name="StudyScenarioXmlType" abstract="true">
        <annotation><documentation>
        Dummy base Study scenario type for extension
        </documentation></annotation>	
		<complexContent>
			<extension base="pss:IDRecordXmlType">
				<sequence>
					<element name="analysisCategory" minOccurs="1" maxOccurs="1" type="pss:AnalysisCategoryEnumType"></element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="IpssStudyScenarioXmlType">
        <annotation><documentation>
		Key concepts:
		- Acsc Fault : defined using Fault Type (BusFault, BranchFault, BranchOutage) and Fault Category (3P, LG, LL, LLG)
		- Dynamic Event : defined using Dynamic Event Type (Fault, LoadChange, SetPointChange). Dynamic Event Fault is then 
                          defined using Acsc Fault.
		</documentation></annotation>
        <complexContent>
			<extension base="pss:StudyScenarioXmlType">
				<sequence>
					<ns:element name="gridRunOption" minOccurs="0" maxOccurs="1" type="pss:GridComputingXmlType"></ns:element>
					<element name="defaultAclfAlgo" type="pss:AclfAlgorithmXmlType" minOccurs="0">
						<annotation><documentation>
						The default AclfAlgo applies to all study scenarios, for contingency analysis
						</documentation></annotation>
					</element>
					<element name="scenarioList" maxOccurs="1" minOccurs="1">
						<complexType>
							<sequence>
								<element name="scenario" type="pss:ScenarioXmlType" maxOccurs="unbounded" minOccurs="1">
									<annotation><documentation>
									Typically, there is one study scenario. However, one can define a let of scenarios,
									for example, for N-1 contingency analysis
									</documentation></annotation>								
								</element>
							</sequence>
						</complexType>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="ScenarioXmlType">
		<annotation><documentation>
		for define a study scenario. 
		</documentation></annotation>
		<complexContent>
			<extension base="pss:IDRecordXmlType">
				<sequence>
					<element name="modifcation" type="pss:ModifyRecordXmlType"	minOccurs="0" maxOccurs="1">
						<annotation><documentation>
						In addition to the modification defined at the StudyCase level,
						modification can be also defined at each scenario level, used for example 
						to create N-1 contingency scenario
						</documentation></annotation>
					</element>
					<element name="simuAlgo" minOccurs="1" maxOccurs="1" type="pss:SimulationAlgorithmXmlType">
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<ns:complexType name="SimulationAlgorithmXmlType">
		<annotation><documentation>
		for define a study scenario analysis details. It is defined using choice, indicating
		that only one analysis type : aclf, acsc or dstab could be selected. 
		</documentation></annotation>	
		<choice>
			<element name="aclfAnalysis" minOccurs="0" maxOccurs="1" type="pss:AclfAlgorithmXmlType"></element>
			<element name="acscAnalysis" minOccurs="0" maxOccurs="1" type="pss:AcscFaultAnalysisXmlType"></element>
			<element name="dStabAnalysis" minOccurs="0" maxOccurs="1" type="pss:DStabSimulationXmlType"></element>
		</choice>
	</ns:complexType>
	
	<ns:complexType name="GridComputingXmlType">
		<ns:sequence>
			<ns:element name="enableGridRun" type="ns:boolean" minOccurs="1" maxOccurs="1"></ns:element>
			<ns:element name="remoteJobCreation" type="ns:boolean" minOccurs="0"></ns:element>
			<ns:element name="timeout" type="ns:long" minOccurs="0" maxOccurs="1">
				<ns:annotation><ns:documentation>
				timeout in milliseconds
				</ns:documentation></ns:annotation>
			</ns:element>
			<ns:element name="remoteNodeDebug" type="ns:boolean" minOccurs="0" maxOccurs="1"></ns:element>
            <ns:element name="remoteNodeName" type="ns:string" minOccurs="0"></ns:element>
            <ns:element name="aclfOption" minOccurs="0">
				<ns:complexType>
					<ns:sequence>
						<ns:element name="returnStudyCase" minOccurs="1">
							<ns:annotation><ns:documentation>
							If true, only return the Aclf network object from the remote grid node to the 
							master node when LF diverger, or there is limit violation.
							</ns:documentation></ns:annotation>
							<ns:simpleType>
								<ns:restriction base="ns:string">
									<ns:enumeration value="AllStudyCase"></ns:enumeration>
									<ns:enumeration value="DivergedCase"></ns:enumeration>
									<ns:enumeration value="NoReturn"></ns:enumeration>
								</ns:restriction>
							</ns:simpleType>
						</ns:element>
						<ns:element name="calculateViolation" type="ns:boolean" minOccurs="0"></ns:element>
						<ns:element name="busVoltagePULimit" type="pss:LimitXmlType" minOccurs="0"></ns:element>
					</ns:sequence>
				</ns:complexType>
			</ns:element>
		</ns:sequence>
	</ns:complexType>
	
	<ns:complexType name="BaseAnalysisTypeXmlType" abstract="true">
		<ns:complexContent>
			<ns:extension base="pss:BaseRecordXmlType"></ns:extension>
		</ns:complexContent>
	</ns:complexType>

	<ns:complexType name="BaseAlgorithmXmlType" abstract="true">
		<ns:complexContent>
			<ns:extension base="pss:BaseRecordXmlType"></ns:extension>
		</ns:complexContent>
	</ns:complexType>

<!-- 
	Aclf Study Scenario
 -->
	<ns:complexType name="AclfAlgorithmXmlType">
		<ns:complexContent>
			<ns:extension base="pss:BaseAnalysisTypeXmlType">
				<ns:sequence>
					<ns:element name="lfMethod" minOccurs="1" maxOccurs="1" type="pss:LfMethodEnumType"/>					<ns:element name="maxIterations" type="ns:int" minOccurs="1" maxOccurs="1"/>
					<ns:element name="tolerance" type="pss:ApparentPowerXmlType" minOccurs="1" maxOccurs="1"/>					<ns:element name="initBusVoltage" type="ns:boolean" minOccurs="0" maxOccurs="1"></ns:element>					<ns:element name="accFactor" type="ns:double" maxOccurs="1" minOccurs="0"></ns:element>
					<ns:element name="nonDivergent" type="ns:boolean" maxOccurs="1" minOccurs="0"></ns:element>
				</ns:sequence>
			</ns:extension>
		</ns:complexContent>
	</ns:complexType>

<!-- 
	Acsc Study Scenario
 -->
	<ns:complexType name="AcscFaultAnalysisXmlType">
		<ns:complexContent>
			<ns:extension base="pss:BaseAnalysisTypeXmlType">
				<ns:sequence>
					<ns:element name="fault" minOccurs="1" type="pss:AcscFaultXmlType"></ns:element>
					<ns:element name="preFaultBusVoltage" minOccurs="0"	maxOccurs="1" type="pss:PreFaultBusVoltageEnumType"></ns:element>
					<ns:element name="multiFactor" type="ns:double" minOccurs="0" maxOccurs="1">
						<ns:annotation><ns:documentation>
						bus voltage multi-factor in percent
						</ns:documentation></ns:annotation>
					</ns:element>						
				</ns:sequence>
			</ns:extension>
		</ns:complexContent>
	</ns:complexType>

<!-- 
	DStab Study Scenario
 -->
	<complexType name="DStabSimulationXmlType">
		<ns:complexContent>
			<ns:extension base="pss:BaseAnalysisTypeXmlType">
				<sequence>
					<element name="simulationSetting" maxOccurs="1" minOccurs="1" type="pss:DStabSimuSettingXmlType"/>
					<element name="aclfInitialization" maxOccurs="1" minOccurs="1" type="pss:AclfAlgorithmXmlType"/>
					<element name="dynamicEvents" maxOccurs="1" minOccurs="1">
						<complexType>
                            <annotation><documentation>
                            when disableDynEvents = true, SetPointChange events might be added. All other 
                            dynamic events are ignore.  
							When study SetPointChange dynamic evetns, you must disableDynEvents = true. 
							There should be not be more than one SetPointChange dynamic events
							</documentation></annotation>
                            <sequence>
								<element name="disableDynEvents" type="boolean" maxOccurs="1" minOccurs="0"></element>
								<element name="dynamicEvent" type="pss:DynamicEventXmlType" maxOccurs="unbounded" minOccurs="0"></element>
							</sequence>
						</complexType>
					</element>
				</sequence>
			</ns:extension>
		</ns:complexContent>
	</complexType>

	<complexType name="DStabSimuSettingXmlType">
		<sequence>
			<element name="dstabMethod" maxOccurs="1" minOccurs="1" type="pss:DStabMethodEnumType">
			</element>
			<element name="totalTime" maxOccurs="1" minOccurs="1" type="pss:TimePeriodXmlType"/>
			<element name="step" type="pss:TimePeriodXmlType" maxOccurs="1" minOccurs="1"/>
			<element name="absMachineAngle" type="boolean" maxOccurs="1" minOccurs="0"/>
			<element name="refMachine" type="pss:IDRefRecordXmlType" maxOccurs="1" minOccurs="0"/>
			<ns:element name="netEqnSolveConfig" minOccurs="0">
				<ns:complexType>
					<ns:sequence>
						<ns:element name="netEqnItrNoEvent" type="ns:int" minOccurs="0" maxOccurs="1"></ns:element>
						<ns:element name="netEqnItrWithEvent" type="ns:int" minOccurs="0" maxOccurs="1"></ns:element>
					</ns:sequence>
				</ns:complexType>
			</ns:element>
			<element name="staticLoadModel" type="pss:StaticLoadModelXmlType" maxOccurs="1" minOccurs="1">
			</element>
		</sequence>
	</complexType>

	<complexType name="StaticLoadModelXmlType">
		<ns:sequence>
			<ns:element name="staticLoadType" minOccurs="1" maxOccurs="1" type="pss:StaticLoadModelEnumType"></ns:element>
			<ns:element name="switchVolt" type="ns:double" minOccurs="0" maxOccurs="1"></ns:element>
			<ns:element name="switchDeadZone" type="ns:double" minOccurs="0" maxOccurs="1"></ns:element>
		</ns:sequence>
	</complexType>

	<complexType name="DynamicEventXmlType">
        <annotation><documentation>
        Only "simple" fault could be simulated, meaning at any time there should be on active fault event, although
        any number of faults could be defined.
        </documentation></annotation>
        <sequence>
			<ns:element name="startTime" type="pss:TimePeriodXmlType" minOccurs="1"></ns:element>
			<ns:element name="duration" type="pss:TimePeriodXmlType" maxOccurs="1" minOccurs="0"></ns:element>
			<ns:element name="permanentFault" type="boolean" maxOccurs="1" minOccurs="0"></ns:element>
			<choice>
        		<annotation><documentation>
        		There are three dynamic event types. Only one type could be selected for a dynamic event.
        		</documentation></annotation>
				<ns:element name="fault" type="pss:AcscFaultXmlType" maxOccurs="1" minOccurs="0"/>
				<ns:element name="loadChangeData" minOccurs="0" maxOccurs="1" type="pss:DStabLoadChangeXmlType"/>
				<ns:element name="setPointChangeData" minOccurs="0" type="pss:DStabSetPointChangeXmlType"/>
			</choice>
		</sequence>
		<attribute name="id" type="string"></attribute>
		<attribute name="name" type="string"></attribute>
		<attribute name="eventType" type="pss:DynamicEventEnumType"/>
	</complexType>

	<ns:complexType name="DStabLoadChangeXmlType">
		<ns:sequence>
			<ns:element name="refBus" type="pss:IDRefRecordXmlType" minOccurs="1" maxOccurs="1"></ns:element>
			<ns:element name="loadChangeType" minOccurs="1" maxOccurs="1" type="pss:DStabLoadChangeEnumType"></ns:element>
			<ns:element name="changeFactor" type="pss:ChangeFactorXmlType" minOccurs="1" maxOccurs="1"></ns:element>
			<ns:element name="threshhold" type="ns:double" minOccurs="0" maxOccurs="1"></ns:element>
			<ns:element name="delayTime" type="ns:double" minOccurs="0" maxOccurs="1"></ns:element>
		</ns:sequence>
	</ns:complexType>

	<ns:complexType name="DStabSetPointChangeXmlType">
		<ns:sequence>
			<ns:element name="refGenerator" type="pss:IDRefRecordXmlType" minOccurs="1" maxOccurs="1"></ns:element>
			<ns:element name="controllerType" minOccurs="1" maxOccurs="1" type="pss:MachineControllerEnumType"></ns:element>
			<ns:element name="changeValue" type="ns:double" minOccurs="1" maxOccurs="1"></ns:element>
			<ns:element name="valueChangeType" minOccurs="1" maxOccurs="1" type="pss:SetPointChangeEnumType">			</ns:element>
		</ns:sequence>
	</ns:complexType>
</schema>