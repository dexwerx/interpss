/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opencim.cim.iec61970.gen.production.validation;

import org.eclipse.emf.common.util.EList;

import org.opencim.cim.iec61970.core.SubControlArea;

import org.opencim.cim.iec61970.domain.GeneratorControlMode;
import org.opencim.cim.iec61970.domain.GeneratorControlSource;
import org.opencim.cim.iec61970.domain.GeneratorOperatingMode;

import org.opencim.cim.iec61970.gen.production.GenUnitOpSchedule;

import org.opencim.datatype.integer.Classification;
import org.opencim.datatype.integer.Priority;

import org.opencim.datatype.real.ActivePower;
import org.opencim.datatype.real.HeatPerHour;
import org.opencim.datatype.real.PU;
import org.opencim.datatype.real.ParticipationFactor;
import org.opencim.datatype.real.PenaltyFactor;
import org.opencim.datatype.real.PerCent;
import org.opencim.datatype.real.PowerROCPerMin;
import org.opencim.datatype.real.PowerROCPerSec;
import org.opencim.datatype.real.Seconds;

/**
 * A sample validator interface for {@link org.opencim.cim.iec61970.gen.production.GeneratingUnit}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface GeneratingUnitValidator {
	boolean validate();

	boolean validateControlDeadband(ActivePower value);
	boolean validateControlPulseHigh(Seconds value);
	boolean validateControlPulseLow(Seconds value);
	boolean validateControlResponseRate(PowerROCPerSec value);
	boolean validateEfficiency(PU value);
	boolean validateGenControlMode(GeneratorControlMode value);
	boolean validateGenControlSource(GeneratorControlSource value);
	boolean validateGovernorMPL(PU value);
	boolean validateGovernorSCD(PerCent value);
	boolean validateHighControlLimit(ActivePower value);
	boolean validateInitialMW(ActivePower value);
	boolean validateLowControlLimit(ActivePower value);
	boolean validateMaximumAllowableSpinningReserve(ActivePower value);
	boolean validateMaximumEconomicMW(ActivePower value);
	boolean validateMaximumOperatingMW(ActivePower value);
	boolean validateMinimumEconomicMW(ActivePower value);
	boolean validateMinimumOperatingMW(ActivePower value);
	boolean validateModelDetail(Classification value);
	boolean validateRatedGrossMaxMW(ActivePower value);
	boolean validateRatedGrossMinMW(ActivePower value);
	boolean validateRatedNetMaxMW(ActivePower value);
	boolean validateStartupTime(Seconds value);
	boolean validateAutoCntrlMarginMW(ActivePower value);
	boolean validateAllocSpinResMW(ActivePower value);
	boolean validateBaseMW(ActivePower value);
	boolean validateDispReserveFlag(Boolean value);
	boolean validateEnergyMinMW(HeatPerHour value);
	boolean validateFastStartFlag(Boolean value);
	boolean validateFuelPriority(Priority value);
	boolean validateGenOperatingMode(GeneratorOperatingMode value);
	boolean validateLongPF(ParticipationFactor value);
	boolean validateLowerRampRate(PowerROCPerMin value);
	boolean validateNormalPF(ParticipationFactor value);
	boolean validatePenaltyFactor(PenaltyFactor value);
	boolean validateRaiseRampRate(PowerROCPerMin value);
	boolean validateShortPF(ParticipationFactor value);
	boolean validateSpinReserveRamp(PowerROCPerMin value);
	boolean validateStepChange(ActivePower value);
	boolean validateTieLinePF(ParticipationFactor value);
	boolean validateMinimumOffTime(Seconds value);
	boolean validateGenUnitOpCostCurves(EList value);
	boolean validateGenUnitOpSchedule(GenUnitOpSchedule value);
	boolean validateGrossToNetMWCurves(EList value);
	boolean validateSubControlArea(SubControlArea value);
	boolean validateSynchronousMachines(EList value);
}
