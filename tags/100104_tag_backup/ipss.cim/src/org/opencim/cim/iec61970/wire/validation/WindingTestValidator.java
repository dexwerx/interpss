/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opencim.cim.iec61970.wire.validation;

import org.eclipse.emf.common.util.EList;

import org.opencim.cim.iec61970.wire.TransformerWinding;

import org.opencim.datatype.integer.TapStep;

import org.opencim.datatype.real.AngleDegrees;
import org.opencim.datatype.real.ExcitingCurrent;
import org.opencim.datatype.real.Impedance;
import org.opencim.datatype.real.LoadLoss;
import org.opencim.datatype.real.NoLoadLoss;
import org.opencim.datatype.real.Voltage;

/**
 * A sample validator interface for {@link org.opencim.cim.iec61970.wire.WindingTest}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface WindingTestValidator {
	boolean validate();

	boolean validateExcitingCurrent(ExcitingCurrent value);
	boolean validateFromTapStep(TapStep value);
	boolean validateLeakageImpedance(Impedance value);
	boolean validateLoadLoss(LoadLoss value);
	boolean validateNoLoadLoss(NoLoadLoss value);
	boolean validatePhaseShift(AngleDegrees value);
	boolean validateToTapStep(TapStep value);
	boolean validateVoltage(Voltage value);
	boolean validateFrom_TransformerWinding(TransformerWinding value);
	boolean validateTo_TransformeWindings(EList value);
}
