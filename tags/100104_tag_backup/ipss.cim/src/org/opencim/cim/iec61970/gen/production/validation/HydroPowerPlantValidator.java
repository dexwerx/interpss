/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opencim.cim.iec61970.gen.production.validation;

import org.eclipse.emf.common.util.EList;

import org.opencim.cim.iec61970.domain.HydroPlantType;
import org.opencim.cim.iec61970.domain.PenstockType;
import org.opencim.cim.iec61970.domain.SurgeTankCode;

import org.opencim.cim.iec61970.gen.production.Reservoir;

import org.opencim.datatype.real.ActivePower;
import org.opencim.datatype.real.Seconds;
import org.opencim.datatype.real.WaterLevel;

/**
 * A sample validator interface for {@link org.opencim.cim.iec61970.gen.production.HydroPowerPlant}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface HydroPowerPlantValidator {
	boolean validate();

	boolean validateDischargeTravelDelay(Seconds value);
	boolean validateHydroPlantType(HydroPlantType value);
	boolean validatePenstockType(PenstockType value);
	boolean validatePlantDischargeCapacity(Float value);
	boolean validatePlantMWGenRating(ActivePower value);
	boolean validatePlantMWPumpRating(ActivePower value);
	boolean validatePlantRatedHead(Float value);
	boolean validateSurgeTankCode(SurgeTankCode value);
	boolean validateSurgeTankCrestLevel(WaterLevel value);
	boolean validateContain_HydroGeneratingUnits(EList value);
	boolean validateContain_HydroPumps(EList value);
	boolean validateReservoir(Reservoir value);
	boolean validateGenSourcePumpDischarge(Reservoir value);
}
