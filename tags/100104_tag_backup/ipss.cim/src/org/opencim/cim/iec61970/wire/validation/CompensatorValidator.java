/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opencim.cim.iec61970.wire.validation;

import java.util.Date;

import org.opencim.cim.iec61970.domain.CompensatorType;

import org.opencim.datatype.integer.Counter;

import org.opencim.datatype.real.Admittance;
import org.opencim.datatype.real.Impedance;
import org.opencim.datatype.real.PUkVPerMVAr;
import org.opencim.datatype.real.Reactance;
import org.opencim.datatype.real.ReactivePower;
import org.opencim.datatype.real.Resistance;
import org.opencim.datatype.real.Seconds;
import org.opencim.datatype.real.Voltage;

/**
 * A sample validator interface for {@link org.opencim.cim.iec61970.wire.Compensator}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface CompensatorValidator {
	boolean validate();

	boolean validateAVRDelay(Seconds value);
	boolean validateImpedance(Impedance value);
	boolean validateMaximumkV(Voltage value);
	boolean validateMaximumSections(Counter value);
	boolean validateMinimumkV(Voltage value);
	boolean validateMVArPerSection(ReactivePower value);
	boolean validateNominalkV(Voltage value);
	boolean validateNominalMVAr(ReactivePower value);
	boolean validateNormalSections(Counter value);
	boolean validateR(Resistance value);
	boolean validateSwitchOnCount(Counter value);
	boolean validateSwitchOnDate(Date value);
	boolean validateVoltSensitivity(PUkVPerMVAr value);
	boolean validateX(Reactance value);
	boolean validateYPerSection(Admittance value);
	boolean validateCompensatorType(CompensatorType value);
}
