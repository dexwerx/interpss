/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opencim.cim.iec61970.wire.validation;

import org.eclipse.emf.common.util.EList;

import org.opencim.cim.iec61970.domain.CoolantType;
import org.opencim.cim.iec61970.domain.SynchronousMachineOperatingMode;
import org.opencim.cim.iec61970.domain.SynchronousMachineType;

import org.opencim.cim.iec61970.gen.production.GeneratingUnit;
import org.opencim.cim.iec61970.gen.production.HydroPump;

import org.opencim.datatype.real.ActivePower;
import org.opencim.datatype.real.ApparentPower;
import org.opencim.datatype.real.Damping;
import org.opencim.datatype.real.Inertia;
import org.opencim.datatype.real.Reactance;
import org.opencim.datatype.real.ReactivePower;
import org.opencim.datatype.real.Resistance;
import org.opencim.datatype.real.Seconds;
import org.opencim.datatype.real.Voltage;

/**
 * A sample validator interface for {@link org.opencim.cim.iec61970.wire.SynchronousMachine}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface SynchronousMachineValidator {
	boolean validate();

	boolean validateAVRToManualLag(Seconds value);
	boolean validateAVRToManualLead(Seconds value);
	boolean validateBaseMVAr(ReactivePower value);
	boolean validateCoolantCondition(Float value);
	boolean validateCoolantType(CoolantType value);
	boolean validateDamping(Damping value);
	boolean validateInertia(Inertia value);
	boolean validateManualToAVR(Seconds value);
	boolean validateMaximumKV(Voltage value);
	boolean validateMaximumMVAr(ReactivePower value);
	boolean validateMinimumKV(Voltage value);
	boolean validateMinimumMVAr(ReactivePower value);
	boolean validateR(Resistance value);
	boolean validateR0(Resistance value);
	boolean validateRatedMVA(ApparentPower value);
	boolean validateX(Reactance value);
	boolean validateX0(Reactance value);
	boolean validateXDirectSubtrans(Reactance value);
	boolean validateXDirectSync(Reactance value);
	boolean validateXDirectTrans(Reactance value);
	boolean validateXQuadSubtrans(Reactance value);
	boolean validateXQuadSync(Reactance value);
	boolean validateXQuadTrans(Reactance value);
	boolean validateOperatingMode(SynchronousMachineOperatingMode value);
	boolean validateType(SynchronousMachineType value);
	boolean validateCondenserMW(ActivePower value);
	boolean validateMVArCapabilityCurves(EList value);
	boolean validateDrives_HydroPump(HydroPump value);
	boolean validateGeneratingUnit(GeneratingUnit value);
	boolean validatePrimeMover(EList value);
}
