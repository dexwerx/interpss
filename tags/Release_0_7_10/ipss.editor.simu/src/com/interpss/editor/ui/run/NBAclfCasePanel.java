package com.interpss.editor.ui.run;

import java.util.Vector;

import com.interpss.common.ui.VerifyUtil;
import com.interpss.common.util.IpssLogger;
import com.interpss.common.util.Num2Str;
import com.interpss.editor.data.proj.AclfCaseData;
import com.interpss.editor.form.GFormContainer;
import com.interpss.editor.form.GNetForm;
import com.interpss.editor.jgraph.ui.edit.IFormDataPanel;
import com.interpss.editor.jgraph.ui.form.IGNetForm;

public class NBAclfCasePanel extends javax.swing.JPanel implements IFormDataPanel {
	private static final long serialVersionUID = 1;

    private GFormContainer _netContainer = null;

    // holds the current case data being edited
    private AclfCaseData _caseData = null;
	
    /** Creates new form NBAclfCasePanel */
    public NBAclfCasePanel() {
        initComponents();

        DataVerifier verifier = new DataVerifier();
        this.accFactorTextField.setInputVerifier(verifier);
        this.errKVATextField.setInputVerifier(verifier);
        this.errPUTextField.setInputVerifier(verifier);
        this.maxItrTextField.setInputVerifier(verifier);
    }
    
    public void init(Object netContainer, Object _null) {
		IpssLogger.getLogger().info("NBAclfCasePanel init() called");
	    _netContainer = (GFormContainer)netContainer;
    }

    public void setCaseData(AclfCaseData data) {
    	_caseData = data;
    }
    
	/**
	*	Set form data to the editor
	*
	* @return false if there is any problem
	*/
	public boolean setForm2Editor() {
		IpssLogger.getLogger().info("NBAclfCasePanel setForm2Editor() called");

        if (_netContainer != null && IGNetForm.AppType_Transmission.equals(_netContainer.getGNetForm().getAppType()))
            this.pqRadioButton.setSelected(true);
        else
        	this.nrRadioButton.setSelected(true);
        
        this.accFactorTextField.setText(Num2Str.toStr(_caseData.getAccFactor(), "#0.0#"));
        this.errPUTextField.setText(Num2Str.toStr(_caseData.getTolerance(), "#0.#####"));
        double baseKva = _netContainer != null? ((GNetForm)_netContainer.getGNetForm()).getBaseKVA() : 100000.0;
        this.errKVATextField.setText(Num2Str.toStr(_caseData.getTolerance()*baseKva, "#0.####"));
        this.maxItrTextField.setText(new Integer(_caseData.getMaxIteration()).toString());
        this.initVoltCheckBox.setSelected(_caseData.getInitBusVolt());
		this.lfSummaryCheckBox.setSelected(_caseData.getShowSummary());

		return true;
	}
    
	/**
	*	Save editor screen data to the form
	*
	* @param errMsg error messages during the saving process.
	* @return false if there is any problem
	*/
	public boolean saveEditor2Form(Vector errMsg) throws Exception {
		IpssLogger.getLogger().info("NBAclfCasePanel saveEditor2Form() called");
		boolean ok = true;

        if (this.nrRadioButton.isSelected())
        	_caseData.setMethod(AclfCaseData.Method_NR);
        else if (this.pqRadioButton.isSelected())
        	_caseData.setMethod(AclfCaseData.Method_PQ);
        else 
        	_caseData.setMethod("GS");

        if (!VerifyUtil.largeThan(this.errPUTextField, 0.0d)) {
            errMsg.add("Error tolerance <= 0.0");
            ok = false;
        }
        _caseData.setTolerance(VerifyUtil.getDouble(this.errPUTextField));

        if (!VerifyUtil.largeThan(this.maxItrTextField, 0)) {
            errMsg.add("Max iterations <= 0");
            ok = false;
        }
        _caseData.setMaxIteration(VerifyUtil.getInt(this.maxItrTextField));

        if (!VerifyUtil.largeThan(this.accFactorTextField, 0.0d)) {
            errMsg.add("GS acceleration factor <= 0.0");
            ok = false;
        }
        _caseData.setAccFactor(VerifyUtil.getDouble(this.accFactorTextField));

        _caseData.setInitBusVolt(this.initVoltCheckBox.isSelected());
        _caseData.setShowSummary(this.lfSummaryCheckBox.isSelected());

        return ok;
	}
    

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        methodButtonGroup = new javax.swing.ButtonGroup();
        methodPanel = new javax.swing.JPanel();
        nrRadioButton = new javax.swing.JRadioButton();
        pqRadioButton = new javax.swing.JRadioButton();
        gsRadioButton = new javax.swing.JRadioButton();
        paramPanel = new javax.swing.JPanel();
        toleranceLabel = new javax.swing.JLabel();
        errPUTextField = new javax.swing.JTextField();
        errPUUnitLabel = new javax.swing.JLabel();
        errKVATextField = new javax.swing.JTextField();
        errKVAUnitLabel = new javax.swing.JLabel();
        maxItrLabel = new javax.swing.JLabel();
        maxItrTextField = new javax.swing.JTextField();
        accFactorLabel = new javax.swing.JLabel();
        accFactorTextField = new javax.swing.JTextField();
        initVoltCheckBox = new javax.swing.JCheckBox();
        lfSummaryCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        methodPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 5));

        methodPanel.setBorder(new javax.swing.border.TitledBorder(null, "Loadflow Method", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
        methodButtonGroup.add(nrRadioButton);
        nrRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        nrRadioButton.setSelected(true);
        nrRadioButton.setText("NR");
        nrRadioButton.setName("nrRadioButton");
        methodPanel.add(nrRadioButton);

        methodButtonGroup.add(pqRadioButton);
        pqRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        pqRadioButton.setText("PQ");
        pqRadioButton.setName("pqRadioButton");
        methodPanel.add(pqRadioButton);

        methodButtonGroup.add(gsRadioButton);
        gsRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        gsRadioButton.setText("GS");
        gsRadioButton.setName("gsRadioButton");
        methodPanel.add(gsRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(methodPanel, gridBagConstraints);

        paramPanel.setLayout(new java.awt.GridBagLayout());

        paramPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 20, 10, 20)));
        toleranceLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        toleranceLabel.setText("Error Tolerance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        paramPanel.add(toleranceLabel, gridBagConstraints);

        errPUTextField.setColumns(5);
        errPUTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        errPUTextField.setText("0.0001");
        errPUTextField.setName("errPUTextField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        paramPanel.add(errPUTextField, gridBagConstraints);

        errPUUnitLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        errPUUnitLabel.setText("(pu)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        paramPanel.add(errPUUnitLabel, gridBagConstraints);

        errKVATextField.setColumns(5);
        errKVATextField.setEditable(false);
        errKVATextField.setFont(new java.awt.Font("Dialog", 0, 12));
        errKVATextField.setText("0.1");
        errKVATextField.setName("errKVATextField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        paramPanel.add(errKVATextField, gridBagConstraints);

        errKVAUnitLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        errKVAUnitLabel.setText("(KVA)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        paramPanel.add(errKVAUnitLabel, gridBagConstraints);

        maxItrLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        maxItrLabel.setText("Max Iterations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 20);
        paramPanel.add(maxItrLabel, gridBagConstraints);

        maxItrTextField.setColumns(5);
        maxItrTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        maxItrTextField.setText("20");
        maxItrTextField.setName("maxItrTextField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        paramPanel.add(maxItrTextField, gridBagConstraints);

        accFactorLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        accFactorLabel.setText("GS Acc Factor");
        accFactorLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        paramPanel.add(accFactorLabel, gridBagConstraints);

        accFactorTextField.setColumns(5);
        accFactorTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        accFactorTextField.setText("1.0");
        accFactorTextField.setEnabled(false);
        accFactorTextField.setName("accFactorTextField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        paramPanel.add(accFactorTextField, gridBagConstraints);

        initVoltCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        initVoltCheckBox.setSelected(true);
        initVoltCheckBox.setText("Initialize Bus Voltage");
        initVoltCheckBox.setName("initVoltCheckBox");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 40, 5, 0);
        paramPanel.add(initVoltCheckBox, gridBagConstraints);

        lfSummaryCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        lfSummaryCheckBox.setSelected(true);
        lfSummaryCheckBox.setText("Show Loadflow Summary");
        lfSummaryCheckBox.setName("lfSummaryCheckBox");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 40, 5, 0);
        paramPanel.add(lfSummaryCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        add(paramPanel, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accFactorLabel;
    private javax.swing.JTextField accFactorTextField;
    private javax.swing.JTextField errKVATextField;
    private javax.swing.JLabel errKVAUnitLabel;
    private javax.swing.JTextField errPUTextField;
    private javax.swing.JLabel errPUUnitLabel;
    private javax.swing.JRadioButton gsRadioButton;
    private javax.swing.JCheckBox initVoltCheckBox;
    private javax.swing.JCheckBox lfSummaryCheckBox;
    private javax.swing.JLabel maxItrLabel;
    private javax.swing.JTextField maxItrTextField;
    private javax.swing.ButtonGroup methodButtonGroup;
    private javax.swing.JPanel methodPanel;
    private javax.swing.JRadioButton nrRadioButton;
    private javax.swing.JPanel paramPanel;
    private javax.swing.JRadioButton pqRadioButton;
    private javax.swing.JLabel toleranceLabel;
    // End of variables declaration//GEN-END:variables
    
	class DataVerifier extends javax.swing.InputVerifier {
		public boolean verify(javax.swing.JComponent input) {
			if (input == null)
				return false;
			try {
       			if (input == maxItrTextField )
 	       			return VerifyUtil.getInt((javax.swing.JTextField)input) > 0;
       			else if (input == accFactorTextField )
 	       			return VerifyUtil.getDouble((javax.swing.JTextField)input) > 0.0;
       			else if (input == errPUTextField) {
 	       			if (VerifyUtil.getDouble((javax.swing.JTextField)input) > 0.0) {
                     double err = VerifyUtil.getDouble(errPUTextField);
                     errKVATextField.setEditable(true);
                     errKVATextField.setText(Num2Str.toStr(err*((GNetForm)_netContainer.getGNetForm()).getBaseKVA(), "#0.####"));
                     errKVATextField.setEditable(false);
                     return true;
                  }
                  return false;
               }  
			} catch (Exception e) {
				return false;
			}		
			return true;
		}
	}
}
