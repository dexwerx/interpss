 /*
  * @(#)InductionGeneratorData.java   
  *
  * Copyright (C) 2006-2007 www.interpss.org
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE
  * as published by the Free Software Foundation; either version 2.1
  * of the License, or (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * @Author Mike Zhou
  * @Version 1.0
  * @Date 11/27/2007
  * 
  *   Revision History
  *   ================
  *
  */

package org.interpss.custom.script.aclf.line;

import java.util.Vector;

import com.interpss.common.ui.ICustomPluginEditor;
import com.interpss.common.ui.SwingInputVerifyUtil;
import com.interpss.common.util.Number2String;

public class NBSampleLineEditPanel extends javax.swing.JPanel implements ICustomPluginEditor {
	private static final long serialVersionUID = 1;

	// define data to be edited
	SampleLineData _data;

    public NBSampleLineEditPanel() {
        initComponents();

        // associate the editing fields with the verifier class defined at the end of this class
  		DataVerifier verifier = new DataVerifier();
  	    xTextField.setInputVerifier(verifier);
  	    rTextField.setInputVerifier(verifier);
  	    hBTextField.setInputVerifier(verifier);
    }
    
    /**
     * Init the editor panel, which will be called from its parent editor
     */
	public void init(Object data) {
		_data = (SampleLineData)data;
	}
	
	/**
	*	Set plugin data to the editor
	*
	* @return false if there is any problem
	*/
    public boolean setData2Editor(String desc) {
    	this.pluginInfoTextArea.setText("Plugin Description: " + desc);
  	    xTextField.setText(Number2String.toStr(_data.getX(), "#0.00"));
  	    rTextField.setText(Number2String.toStr(_data.getR(), "#0.000"));
  	    hBTextField.setText(Number2String.toStr(_data.getHB(), "#0.00"));
        return true;
	}
    
	/**
	*	Save editor screen data to the plugin data object
	*
	* @param errMsg error messages during the saving process.
	* @return false if there is any problem
	*/
    public boolean saveEditorData(Vector<String> errMsg) throws Exception {
    	errMsg.clear();
    	
		if (SwingInputVerifyUtil.within(this.xTextField, 0.0, 100.0, errMsg, 
				"Pe is out of the range [0.0, 100.0]"))
			_data.setX(SwingInputVerifyUtil.getDouble(xTextField));

		if (SwingInputVerifyUtil.within(this.rTextField, 0.0, 100.0, errMsg,
				"R is out of the range [0.0, 100.0]"))
			_data.setR(SwingInputVerifyUtil.getDouble(rTextField));

    	if (SwingInputVerifyUtil.within(this.hBTextField, 0.0, 10.0, errMsg,
    			"Xs is out of the range [0.0, 20.0]"))
    		_data.setHB(SwingInputVerifyUtil.getDouble(hBTextField));

    	return errMsg.size() == 0;
	}
    
	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        xLabel = new javax.swing.JLabel();
        xTextField = new javax.swing.JTextField();
        rLabel = new javax.swing.JLabel();
        rTextField = new javax.swing.JTextField();
        hBLabel = new javax.swing.JLabel();
        hBTextField = new javax.swing.JTextField();
        textareaScrollPane = new javax.swing.JScrollPane();
        pluginInfoTextArea = new javax.swing.JTextArea();

        xLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        xLabel.setText("X(pu)");

        xTextField.setColumns(5);
        xTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        xTextField.setText("0.01");

        rLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        rLabel.setText("R(pu)");

        rTextField.setColumns(5);
        rTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        rTextField.setText("0.0");

        hBLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        hBLabel.setText("HalfB(pu)");

        hBTextField.setColumns(5);
        hBTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        hBTextField.setText("0.0");

        pluginInfoTextArea.setColumns(20);
        pluginInfoTextArea.setEditable(false);
        pluginInfoTextArea.setFont(new java.awt.Font("Dialog", 0, 12));
        pluginInfoTextArea.setLineWrap(true);
        pluginInfoTextArea.setRows(3);
        pluginInfoTextArea.setText("Plugin impl description");
        pluginInfoTextArea.setWrapStyleWord(true);
        textareaScrollPane.setViewportView(pluginInfoTextArea);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .add(textareaScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 353, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(48, 48, 48))
            .add(layout.createSequentialGroup()
                .add(69, 69, 69)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(xLabel)
                        .add(39, 39, 39)
                        .add(xTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(hBLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(hBTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(50, 50, 50)
                .add(rLabel)
                .add(45, 45, 45)
                .add(rTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(xLabel)
                    .add(xTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rLabel)
                    .add(rTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(hBLabel)
                    .add(hBTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(27, 27, 27)
                .add(textareaScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hBLabel;
    private javax.swing.JTextField hBTextField;
    private javax.swing.JTextArea pluginInfoTextArea;
    private javax.swing.JLabel rLabel;
    private javax.swing.JTextField rTextField;
    private javax.swing.JScrollPane textareaScrollPane;
    private javax.swing.JLabel xLabel;
    private javax.swing.JTextField xTextField;
    // End of variables declaration//GEN-END:variables

    // define data validation rules
	class DataVerifier extends javax.swing.InputVerifier {
    	public boolean verify(javax.swing.JComponent input) {
			if (input == null)
				return false;
       		try {
       			// data field verification rules
    			if ( input == xTextField ||
             		 input == rTextField ||
             		 input == hBTextField )
    	       		return SwingInputVerifyUtil.getDouble((javax.swing.JTextField)input) >= 0.0;
 	       	} catch (Exception e) {
 	    		return false;
 	       	}		
			return true;
        }
    }
}
