/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opencim.cim.iec61970.wire.validation;

import org.eclipse.emf.common.util.EList;

import org.opencim.cim.iec61970.load.LoadArea;
import org.opencim.cim.iec61970.load.PowerCutZone;

import org.opencim.datatype.integer.Counter;

import org.opencim.datatype.real.ActivePower;
import org.opencim.datatype.real.Exponent;
import org.opencim.datatype.real.PerCent;
import org.opencim.datatype.real.PowerFactor;
import org.opencim.datatype.real.ReactivePower;

/**
 * A sample validator interface for {@link org.opencim.cim.iec61970.wire.EnergyConsumer}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface EnergyConsumerValidator {
	boolean validate();

	boolean validateLoadDemandModels(EList value);
	boolean validateNonConformLoadSchedules(EList value);
	boolean validateLoadArea(LoadArea value);
	boolean validatePowerCutZone(PowerCutZone value);
	boolean validateConformingLoadFlag(Boolean value);
	boolean validateCustomerCount(Counter value);
	boolean validatePFexp(Exponent value);
	boolean validatePfixed(ActivePower value);
	boolean validatePfixedPct(PerCent value);
	boolean validatePnom(ActivePower value);
	boolean validatePnomPct(PerCent value);
	boolean validatePowerFactor(PowerFactor value);
	boolean validatePVexp(Exponent value);
	boolean validateQFexp(Exponent value);
	boolean validateQfixed(ReactivePower value);
	boolean validateQfixedPct(PerCent value);
	boolean validateQnom(ReactivePower value);
	boolean validateQnomPct(PerCent value);
	boolean validateQVexp(Exponent value);
}
