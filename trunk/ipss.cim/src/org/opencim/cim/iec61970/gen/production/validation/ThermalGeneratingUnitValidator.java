/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opencim.cim.iec61970.gen.production.validation;

import org.eclipse.emf.common.util.EList;

import org.opencim.cim.iec61970.gen.production.CAESPlant;
import org.opencim.cim.iec61970.gen.production.CogenerationPlant;
import org.opencim.cim.iec61970.gen.production.CombinedCyclePlant;
import org.opencim.cim.iec61970.gen.production.HeatInputCurve;
import org.opencim.cim.iec61970.gen.production.HeatRateCurve;
import org.opencim.cim.iec61970.gen.production.IncrementalHeatRateCurve;
import org.opencim.cim.iec61970.gen.production.ShutdownCurve;
import org.opencim.cim.iec61970.gen.production.StartupModel;

import org.opencim.datatype.real.CostPerHeatUnit;

/**
 * A sample validator interface for {@link org.opencim.cim.iec61970.gen.production.ThermalGeneratingUnit}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface ThermalGeneratingUnitValidator {
	boolean validate();

	boolean validateOMCost(CostPerHeatUnit value);
	boolean validateEmmissionAccounts(EList value);
	boolean validateEmissionCurves(EList value);
	boolean validateFossilFuels(EList value);
	boolean validateFuelAllocationSchedules(EList value);
	boolean validateHeatInputCurve(HeatInputCurve value);
	boolean validateHeatRateCurve(HeatRateCurve value);
	boolean validateIncrementalHeatRateCurve(IncrementalHeatRateCurve value);
	boolean validateShutdownCurve(ShutdownCurve value);
	boolean validateStartupModel(StartupModel value);
	boolean validateMemberOf_CAESPlant(CAESPlant value);
	boolean validateMembmerOf_CogenerationPlant(CogenerationPlant value);
	boolean validateMemberOf_CombinedCyclePlant(CombinedCyclePlant value);
}
