/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opencim.cim.iec61970.gen.generationdynamics.validation;

import org.opencim.cim.iec61970.domain.BoilerControlMode;

import org.opencim.datatype.real.PU;
import org.opencim.datatype.real.PowerVersusFrequency;
import org.opencim.datatype.real.PowerVersusVoltage;
import org.opencim.datatype.real.RateOfChange;
import org.opencim.datatype.real.Ratio;
import org.opencim.datatype.real.Seconds;

/**
 * A sample validator interface for {@link org.opencim.cim.iec61970.gen.generationdynamics.FossilSteamSupply}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface FossilSteamSupplyValidator {
	boolean validate();

	boolean validateAuxPowerVersusFrequency(PowerVersusFrequency value);
	boolean validateAuxPowerversusVoltage(PowerVersusVoltage value);
	boolean validateControlIC(Float value);
	boolean validateBoilerControlMode(BoilerControlMode value);
	boolean validateControlMWEB(Ratio value);
	boolean validateControlPC(Float value);
	boolean validateControlPEB(Ratio value);
	boolean validateControlPED(PU value);
	boolean validateControlTC(Float value);
	boolean validateFeedWaterIG(Ratio value);
	boolean validateFeedWaterPG(Ratio value);
	boolean validateFeedWaterTC(Seconds value);
	boolean validateFuelDemandLimit(PU value);
	boolean validateFuelSupplyDelay(Seconds value);
	boolean validateMechPowerSensorLag(Seconds value);
	boolean validateFuelSupplyTC(Seconds value);
	boolean validateMWMaximumER(RateOfChange value);
	boolean validateMWMinimumER(RateOfChange value);
	boolean validatePressureCtrlDG(Ratio value);
	boolean validatePressureCtrlIG(Ratio value);
	boolean validatePressureCtrlPG(Ratio value);
	boolean validatePressureFeedback(Integer value);
	boolean validateSuperHeater1Capacity(Float value);
	boolean validateSuperHeater2Capacity(Float value);
	boolean validateSuperHeaterPipePD(Float value);
	boolean validateThrottlePressureSP(PU value);
}
